let player;
let devices = [];

/* --- youtube player */

/* load youtube js api */
!(function () {
  const script = document.createElement('script');
  script.src = "https://www.youtube.com/iframe_api";
  document.head.appendChild(script);
})();

/* this function is called automatically when the iframe_api is ready */
function onYouTubeIframeAPIReady () {
  player = new YT.Player("player", {
    videoId: "N_ATbQLVQjE",
    playerVars: {
      loop: 1,
      autoplay: 1,
      playsinline: 1,
      enablejsapi: 1,
    },
    events: {
      onReady: function () {
        document.getElementById("videoStatus").innerHTML = "LOADED";
        player.setVolume(0);
        player.setLoop(true);
        player.seekTo(6);
        player.playVideo();
      },
    },
  });
}

/* --- devices */

async function connectTrv () {
  const trv = new TranceVibrator();
  await trv.connect();
  devices.push(trv);
  document.getElementById("trvStatus").innerHTML = "CONNECTED";
}

async function connectJoyCon () {
  const joyCon = new JoyCon();
  await joyCon.connect();
  devices.push(joyCon);
  document.getElementById("joyConStatus").innerHTML = "CONNECTED";
}

function enableVib () {
  const vib = new BuiltinVibrator();
  vib.connect();
  devices.push(vib);
  document.getElementById("vibStatus").innerHTML = "ENABLED";
}

/* --- songs */

function withBPM (bpm, arr) {
  return (time) => arr[Math.floor(time * bpm * 4 / 60)] || 0;
}

const track1a = withBPM(140, [
  /* kick: 1.00 0.50 */
  /* 1                    2                       3                       4                   */
  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.75, 0.50, 0.75, 0.50, 0.75, 0.50, 0.75, 0.50, 0.75, 0.50, 0.75, 0.50, 0.75, 0.50, 0.75, 0.50,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.50,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.50, 1.00, 0.50, 1.00, 0.50, 1.00, 0.50, 1.00, 0.50,
  1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00, 1.00, 0.50, 0.00, 0.00,
]);

const track1b = withBPM(140, [
  /* synth: 0.50 0.75 1.00 */
  /* 1                    2                       3                       4                   */
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.50, 1.00, 0.50, 1.00, 0.50,
  0.75, 1.00, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
  0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.50, 1.00, 0.50, 1.00, 0.50,
  0.75, 1.00, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.50, 0.75, 1.00, 0.00, 0.00, 0.00, 0.00, 0.00,
]);

const track2a = withBPM(142, [
  /* base kick pattern: 1.00 0.75 0.50 */
  /* 1                    2                       3                       4                   */
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
  1.00, 0.75, 0.50, 0.00, 1.00, 0.75, 0.50, 0.00,
]);

const track3 = withBPM(138, [
  /* base kick pattern: 1.00 */
  /* 1                    2                       3                       4                   */
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00,
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00,
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00,
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00,
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00,
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00,
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00,
  1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00, 0.00, 1.00, 0.00,
]);

const track4 = withBPM(140, [
  /* base kick pattern: 1.00 0.75 0.50 0.25 */
  /* 1                    2                       3                       4                   */
  1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.50, 1.00, 0.50, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.50, 1.00, 0.50, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25, 1.00, 0.75, 0.50, 0.25,
  1.00, 0.50, 1.00, 0.50, 0.25, 0.00, 0.00, 0.00,
]);

const track5 = withBPM(90, [
  /* 1                    2                       3                       4                   */
  1.00, 0.80, 0.80, 0.80, 0.70, 0.70, 0.70, 0.70, 0.60, 0.60, 0.60, 0.60, 0.50, 0.50, 0.50, 0.50,
  0.50, 0.50, 0.50, 0.50, 0.40, 0.40, 0.40, 0.40, 0.30, 0.30, 0.30, 0.30, 0.20, 0.20, 0.20, 0.20,
  0.80, 0.80, 0.80, 0.80, 0.70, 0.70, 0.70, 0.70, 0.60, 0.60, 0.60, 0.60, 0.50, 0.50, 0.50, 0.50,
  0.50, 0.50, 0.50, 0.50, 0.40, 0.40, 0.40, 0.40, 0.30, 0.30, 0.30, 0.30, 0.20, 0.20, 0.20, 0.20,
  0.80, 0.80, 0.80, 0.80, 0.70, 0.70, 0.70, 0.70, 0.60, 0.60, 0.60, 0.60, 0.50, 0.50, 0.50, 0.50,
  0.50, 0.50, 0.50, 0.50, 0.40, 0.40, 0.40, 0.40, 0.30, 0.30, 0.30, 0.30, 0.20, 0.20, 0.20, 0.20,
  0.80, 0.80, 0.80, 0.80, 0.70, 0.70, 0.70, 0.70, 0.60, 0.60, 0.60, 0.60, 0.50, 0.50, 0.50, 0.50,
  0.75, 0.00, 0.75, 0.00, 0.50, 0.60, 0.70, 0.80, 0.50, 0.75, 0.00, 0.00, 0.75, 0.50, 0.00, 0.00,
  /* 1                    2                       3                       4                   */
  0.75, 0.50, 0.75, 0.50, 1.00, 0.75, 0.50, 0.00, 0.75, 0.50, 0.00, 0.75, 1.00, 0.75, 0.50, 0.50,
  0.75, 0.50, 0.75, 0.50, 1.00, 0.75, 0.50, 0.00, 0.75, 0.50, 0.00, 0.75, 1.00, 0.75, 0.50, 0.50,
  0.75, 0.50, 0.75, 0.50, 1.00, 0.75, 0.50, 0.00, 0.75, 0.50, 0.00, 0.75, 1.00, 0.75, 0.50, 0.50,
  0.75, 0.50, 0.75, 0.50, 1.00, 0.75, 0.50, 0.70, 0.90, 0.70, 0.50, 0.75, 1.00, 0.75, 0.50, 0.50,
  0.75, 0.50, 0.75, 0.50, 1.00, 0.75, 0.50, 0.00, 0.75, 0.50, 0.00, 0.75, 0.00, 0.00, 0.00, 0.50,
  0.75, 0.50, 0.75, 0.50, 1.00, 0.75, 0.50, 0.00, 0.75, 0.50, 0.00, 0.75, 1.00, 0.75, 0.50, 0.50,
  0.75, 0.50, 0.75, 0.50, 1.00, 0.75, 0.50, 0.00, 0.75, 0.50, 0.00, 0.75, 0.75, 0.50, 0.25, 0.50,
]);

const FADE_DURATION = 1;
function fade (beg, end, time) {
  return Math.max(
    0,
    Math.min(1, (time - beg) / FADE_DURATION + 1) * Math.min(1, (end - time) / FADE_DURATION + 1)
  );
}

function vibrationValue (time) {
  return Math.min(
    1.0,
    fade( 0.35, 21.90, time) * (1.0 * track1a(time -  0.35) + 0.5 * track1b(time - 0.35)) +
    fade(22.90, 37.95, time) * track2a(time - 22.40) +
    track3(time - 38.45) +
    track4(time - 52.35) +
    track5(time - 73.90)
  );
}

/* --- entrypoint */

const timeEl = document.getElementById("time");
function monitorPlayerStatus () {
  switch (player.getPlayerState()) {
    case 1:
      const time = player.getCurrentTime();
      const value = vibrationValue(time);
      devices.forEach(dev => dev.send(value));
      timeEl.innerHTML = time;
      document.body.style.setProperty("--vib1", value);
      break;
    default:
      devices.forEach(dev => dev.send(0));
      timeEl.innerHTML = "(paused)";
      document.body.style.setProperty("--vib1", 0);
  }
}

function play () {
  if (!player) {
    alert("Video is not loaded. Please reload this page if it does not load.");
    return;
  }
  player.seekTo(0);
  player.unMute();
  player.setVolume(100);
  setInterval(monitorPlayerStatus, 30);
  document.getElementById("setup").remove();
  document.getElementById("control").style.display = "block";
}
