let player;
let trv;
let joyCon;

/* --- youtube player */

/* load youtube js api */
!(function () {
  const script = document.createElement('script');
  script.src = "https://www.youtube.com/iframe_api";
  document.head.appendChild(script);
})();

/* this function is called automatically when the iframe_api is ready */
function onYouTubeIframeAPIReady () {
  player = new YT.Player("player", {
    videoId: "N_ATbQLVQjE",
    playerVars: {
      loop: 1,
      autoplay: 1,
      playsinline: 1,
      enablejsapi: 1,
    },
    events: {
      onReady: function () {
        document.getElementById("videoStatus").innerHTML = "LOADED";
        player.setVolume(0);
        player.setLoop(true);
        player.seekTo(6);
        player.playVideo();
      },
    },
  });
}

/* --- trance vibrator */

async function sendTrv (value) {
  if (trv) {
    await trv.controlTransferOut({
      requestType: "vendor",
      recipient: "interface",
      request: 1,
      value: value,
      index: 0,
    });
  }
}

async function connectTrv () {
  if (!navigator.usb) {
    alert("WebUSB unsupported on your browser");
    return;
  }
  trv = await navigator.usb.requestDevice({
    filters: [
      { vendorId: 0x0b49, productId: 0x064f },
    ],
  });
  await trv.open();
  await trv.selectConfiguration(1);
  await trv.claimInterface(0);
  await sendTrv(128);
  setTimeout(function () { sendTrv(0); }, 250);
  document.getElementById("trvStatus").innerHTML = "CONNECTED";
}

/* --- Joy-Con, Pro-Con */

/* some codes are taken from https://github.com/aka256/joycon-webhid under the MIT License */

const DEFAULT_RUMBLE = [0x00, 0x01, 0x40, 0x40, 0x00, 0x01, 0x40, 0x40];
let packetId = 0;

async function joyConSendReport (reportId, rumbleData, subCommand = 0x00, ...args) {
  if (joyCon) {
    /* taken from output_report.ts::writeOutputReport */
    await joyCon.sendReport(
      reportId,
      Uint8Array.from([packetId++].concat(rumbleData).concat([subCommand]).concat(args))
    );
  }
}

function makeJoyConRumbleData (highFreq, highAmp, lowFreq, lowAmp) {
  /* taken from helper.ts::encodeHighFreq */
  const clampedHighFreq = Math.max(41, Math.min(1253, highFreq));
  const encodedHighFreq = (Math.round(Math.log2(clampedHighFreq / 10.0) * 32.0) - 0x60) * 4;

  /* taken from helper.ts::encodeLowFreq */
  const clampedLowFreq = Math.max(41, Math.min(1253, lowFreq))
  const encodedLowFreq = Math.round(Math.log2(clampedLowFreq / 10.0) * 32.0) - 0x40;

  /* taken from helper.ts::encodeHighAmpli */
  const encodedHighAmp = 2 * (
    0 < highAmp && highAmp < 0.012 ? (
      1
    ) : 0.012 <= highAmp && highAmp < 0.112 ? (
      Math.round(4 * Math.log2(highAmp * 110))
    ) : 0.112 <= highAmp && highAmp < 0.225 ? (
      Math.round(16 * Math.log2(highAmp * 17))
    ) : 0.225 <= highAmp && highAmp <= 1 ? (
      Math.round(32 * Math.log2(highAmp * 8.7))
    ) : (
      0
    )
  );

  /* taken from helper.ts::encodeLowAmpli */
  const encodedLowAmp = 64 + Math.floor((
    0 < lowAmp && lowAmp < 0.012 ? (
      1
    ) : 0.012 <= lowAmp && lowAmp < 0.112? (
      Math.round(4 * Math.log2(lowAmp * 110))
    ) : 0.112 <= lowAmp && lowAmp < 0.225 ? (
      Math.round(16 * Math.log2(lowAmp * 17))
    ) : 0.225 <= lowAmp && lowAmp <= 1 ? (
      Math.round(32 * Math.log2(lowAmp * 8.7))
    ) : (
      0
    )
  ) / 2);

  /* taken from event.ts::setRumble */
  const data = [];
  /* left */
  data.push(encodedHighFreq & 0xff);
  data.push(encodedHighAmp + ((encodedHighFreq >> 8) & 0xff));
  data.push(encodedLowFreq + ((encodedLowAmp >> 8) & 0xff));
  data.push(encodedLowAmp & 0xff);
  /* right */
  data.push(encodedHighFreq & 0xff);
  data.push(encodedHighAmp + ((encodedHighFreq >> 8) & 0xff));
  data.push(encodedLowFreq + ((encodedLowAmp >> 8) & 0xff));
  data.push(encodedLowAmp & 0xff);

  return data;
}

async function sendJoyCon (value) {
  joyConSendReport(0x10, makeJoyConRumbleData(160, value, 80, value));
}

/* taken from event.ts::controlHID */
async function connectJoyCon () {
  if (!navigator.hid) {
    alert("WebHID unsupported on your browser");
    return;
  }
  const devs = await navigator.hid.requestDevice({
    filters: [
      { vendorId: 0x057e },
    ],
  });
  joyCon = devs[0];
  await joyCon.open();
  await joyConSendReport(0x01, DEFAULT_RUMBLE, 0x48, 0x01); /* Enable rumble */
  await sendJoyCon(0.5);
  setTimeout(function () { sendJoyCon(0); }, 250);
  document.getElementById("joyConStatus").innerHTML = "CONNECTED";
}

/* --- built-in vibrator  */

let vibEnabled = false;

function enableVib () {
  if (!navigator.vibrate) {
    alert("Vibration API unsupported on your browser");
    return;
  }
  vibEnabled = true;
  navigator.vibrate(250);
  document.getElementById("vibStatus").innerHTML = "ENABLED";
}

let vibratingState = false;
function sendVib (value) {
  const newVibratingState = value > 128 ? true : false;
  if (vibEnabled && vibratingState != newVibratingState) {
    navigator.vibrate(newVibratingState ? 1000 : 0);
    vibratingState = newVibratingState;
  }
}

/* --- songs */

function withBPM (bpm, arr) {
  return (time) => arr[Math.floor(time * bpm * 4 / 60)] || 0;
}

const track1a = withBPM(140, [
  /* kick: 0xff 0x7f */
  /* 1                    2                       3                       4                   */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xbf, 0x7f, 0xbf, 0x7f, 0xbf, 0x7f, 0xbf, 0x7f, 0xbf, 0x7f, 0xbf, 0x7f, 0xbf, 0x7f, 0xbf, 0x7f,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x7f,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f,
  0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00,
]);

const track1b = withBPM(140, [
  /* synth: 0x7f 0xbf 0xff */
  /* 1                    2                       3                       4                   */
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f,
  0xbf, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f,
  0xbf, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
]);

const track2a = withBPM(142, [
  /* base kick pattern: 0xff 0xbf 0x7f */
  /* 1                    2                       3                       4                   */
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
  0xff, 0xbf, 0x7f, 0x00, 0xff, 0xbf, 0x7f, 0x00,
]);

const track3 = withBPM(138, [
  /* base kick pattern: 0xff */
  /* 1                    2                       3                       4                   */
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00,
]);

const track4 = withBPM(140, [
  /* base kick pattern: 0xff 0xbf 0x7f 0x3f */
  /* 1                    2                       3                       4                   */
  0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0x7f, 0xff, 0x7f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0x7f, 0xff, 0x7f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f, 0xff, 0xbf, 0x7f, 0x3f,
  0xff, 0x7f, 0xff, 0x7f, 0x3f, 0x00, 0x00, 0x00,
]);

const track5 = withBPM(90, [
  /* intro */
  /* 1                    2                       3                       4                   */
  0xff, 0xff, 0xaf, 0xaf, 0x9f, 0x9f, 0x9f, 0x9f, 0x8f, 0x8f, 0x8f, 0x8f, 0x7f, 0x7f, 0x7f, 0x7f,
  0x6f, 0x6f, 0x6f, 0x6f, 0x5f, 0x5f, 0x5f, 0x5f, 0x4f, 0x4f, 0x4f, 0x4f, 0x3f, 0x3f, 0x3f, 0x3f,
  0xaf, 0xaf, 0xaf, 0xaf, 0x9f, 0x9f, 0x9f, 0x9f, 0x8f, 0x8f, 0x8f, 0x8f, 0x7f, 0x7f, 0x7f, 0x7f,
  0x6f, 0x6f, 0x6f, 0x6f, 0x5f, 0x5f, 0x5f, 0x5f, 0x4f, 0x4f, 0x4f, 0x4f, 0x3f, 0x3f, 0x3f, 0x3f,
  0xaf, 0xaf, 0xaf, 0xaf, 0x9f, 0x9f, 0x9f, 0x9f, 0x8f, 0x8f, 0x8f, 0x8f, 0x7f, 0x7f, 0x7f, 0x7f,
  0x6f, 0x6f, 0x6f, 0x6f, 0x5f, 0x5f, 0x5f, 0x5f, 0x4f, 0x4f, 0x4f, 0x4f, 0x3f, 0x3f, 0x3f, 0x3f,
  0xaf, 0xaf, 0xaf, 0xaf, 0x9f, 0x9f, 0x9f, 0x9f, 0x8f, 0x8f, 0x8f, 0x8f, 0x7f, 0x7f, 0x7f, 0x7f,
  0x9f, 0x00, 0x9f, 0x00, 0x5f, 0x6f, 0x7f, 0x8f, 0x9f, 0x6f, 0x00, 0x00, 0x9f, 0x6f, 0x00, 0x00,
  /* base kick pattern: 0xff 0xbf 0x7f */
  /* 1                    2                       3                       4                   */
  0x9f, 0x6f, 0x9f, 0x6f, 0xff, 0xbf, 0x7f, 0x00, 0x9f, 0x6f, 0x00, 0x9f, 0xff, 0xbf, 0x7f, 0x6f,
  0x9f, 0x6f, 0x9f, 0x6f, 0xff, 0xbf, 0x7f, 0x00, 0x9f, 0x6f, 0x00, 0x9f, 0xff, 0xbf, 0x7f, 0x6f,
  0x9f, 0x6f, 0x9f, 0x6f, 0xff, 0xbf, 0x7f, 0x00, 0x9f, 0x6f, 0x00, 0x9f, 0xff, 0xbf, 0x7f, 0x6f,
  0x9f, 0x6f, 0x9f, 0x6f, 0xff, 0xbf, 0x7f, 0x8f, 0x9f, 0x8f, 0x70, 0x6f, 0xff, 0xbf, 0x7f, 0x6f,
  0x9f, 0x6f, 0x9f, 0x6f, 0xff, 0xbf, 0x7f, 0x00, 0x9f, 0x6f, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x6f,
  0x9f, 0x6f, 0x9f, 0x6f, 0xff, 0xbf, 0x7f, 0x00, 0x9f, 0x6f, 0x00, 0x9f, 0xff, 0xbf, 0x7f, 0x6f,
  0x9f, 0x6f, 0x9f, 0x6f, 0xff, 0xbf, 0x7f, 0x00, 0x9f, 0x6f, 0x00, 0x9f, 0xbf, 0x7f, 0x3f, 0x6f,
]);

const FADE_DURATION = 1;
function fade (beg, end, time) {
  return Math.max(
    0,
    Math.min(1, (time - beg) / FADE_DURATION + 1) * Math.min(1, (end - time) / FADE_DURATION + 1)
  );
}

function vibrationValue (time) {
  return Math.min(
    255,
    fade( 0.35, 21.90, time) * (1.0 * track1a(time -  0.35) + 0.5 * track1b(time - 0.35)) +
    fade(22.90, 37.95, time) * track2a(time - 22.40) +
    track3(time - 38.45) +
    track4(time - 52.35) +
    track5(time - 73.90)
  );
}

/* --- entrypoint */

const timeEl = document.getElementById("time");
function monitorPlayerStatus () {
  switch (player.getPlayerState()) {
    case 1:
      const time = player.getCurrentTime();
      const value = vibrationValue(time);
      sendTrv(value);
      sendJoyCon(value / 255);
      sendVib(value);
      timeEl.innerHTML = time;
      document.body.style.setProperty("--vib1", value / 255);
      break;
    default:
      sendTrv(0);
      sendJoyCon(0);
      sendVib(0);
      timeEl.innerHTML = "(paused)";
      document.body.style.setProperty("--vib1", 0);
  }
}

function play () {
  if (!player) {
    alert("Video is not loaded. Please reload this page if it does not load.");
    return;
  }
  player.seekTo(0);
  player.unMute();
  player.setVolume(100);
  setInterval(monitorPlayerStatus, 30);
  document.getElementById("setup").remove();
  document.getElementById("control").style.display = "block";
}
